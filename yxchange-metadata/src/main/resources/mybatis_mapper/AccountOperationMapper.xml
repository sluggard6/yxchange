<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.github.yxchange.metadata.mapper.AccountOperationMapper" >
  <resultMap id="BaseResultMap" type="com.github.yxchange.metadata.entity.AccountOperation" >
    <!--
      WARNING - @mbggenerated
    -->
    <constructor >
      <idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="order_id" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="operation" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="amount" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="freeze_order_id" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="available_before" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="available_after" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="freezed_before" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="freezed_after" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="description" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="createtime" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="modifytime" jdbcType="TIMESTAMP" javaType="java.util.Date" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause" >
    <!--
      WARNING - @mbggenerated
    -->
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <!--
      WARNING - @mbggenerated
    -->
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    <!--
      WARNING - @mbggenerated
    -->
    id, order_id, operation, amount, freeze_order_id, available_before, available_after, 
    freezed_before, freezed_after, description, createtime, modifytime
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.github.yxchange.metadata.entity.AccountOperationExample" >
    <!--
      WARNING - @mbggenerated
    -->
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from account_operation
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="getUnFreezed" resultType="java.math.BigDecimal">
  	select sum(amount) from account_operation where freeze_order_id=${freezeOrderId} and id=${freezeOrderId}
  </select>
  
  <delete id="deleteByExample" parameterType="com.github.yxchange.metadata.entity.AccountOperationExample" >
    <!--
      WARNING - @mbggenerated
    -->
    delete from account_operation
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <select id="countByExample" parameterType="com.github.yxchange.metadata.entity.AccountOperationExample" resultType="java.lang.Integer" >
    <!--
      WARNING - @mbggenerated
    -->
    select count(*) from account_operation
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    <!--
      WARNING - @mbggenerated
    -->
    update account_operation
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.orderId != null" >
        order_id = #{record.orderId,jdbcType=VARCHAR},
      </if>
      <if test="record.operation != null" >
        operation = #{record.operation,jdbcType=INTEGER},
      </if>
      <if test="record.amount != null" >
        amount = #{record.amount,jdbcType=DECIMAL},
      </if>
      <if test="record.freezeOrderId != null" >
        freeze_order_id = #{record.freezeOrderId,jdbcType=VARCHAR},
      </if>
      <if test="record.availableBefore != null" >
        available_before = #{record.availableBefore,jdbcType=DECIMAL},
      </if>
      <if test="record.availableAfter != null" >
        available_after = #{record.availableAfter,jdbcType=DECIMAL},
      </if>
      <if test="record.freezedBefore != null" >
        freezed_before = #{record.freezedBefore,jdbcType=DECIMAL},
      </if>
      <if test="record.freezedAfter != null" >
        freezed_after = #{record.freezedAfter,jdbcType=DECIMAL},
      </if>
      <if test="record.description != null" >
        description = #{record.description,jdbcType=VARCHAR},
      </if>
      <if test="record.createtime != null" >
        createtime = #{record.createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.modifytime != null" >
        modifytime = #{record.modifytime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    <!--
      WARNING - @mbggenerated
    -->
    update account_operation
    set id = #{record.id,jdbcType=INTEGER},
      order_id = #{record.orderId,jdbcType=VARCHAR},
      operation = #{record.operation,jdbcType=INTEGER},
      amount = #{record.amount,jdbcType=DECIMAL},
      freeze_order_id = #{record.freezeOrderId,jdbcType=VARCHAR},
      available_before = #{record.availableBefore,jdbcType=DECIMAL},
      available_after = #{record.availableAfter,jdbcType=DECIMAL},
      freezed_before = #{record.freezedBefore,jdbcType=DECIMAL},
      freezed_after = #{record.freezedAfter,jdbcType=DECIMAL},
      description = #{record.description,jdbcType=VARCHAR},
      createtime = #{record.createtime,jdbcType=TIMESTAMP},
      modifytime = #{record.modifytime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
</mapper>